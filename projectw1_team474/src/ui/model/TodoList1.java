package ui.model;

import sun.audio.AudioPlayer;
import sun.audio.AudioStream;

import javax.sound.sampled.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class TodoList1 {
    private JPanel TodoList;
    private JButton button1;
    private JButton button2;
    private JButton button3;
    private TodoList todos = new TodoList();

    public TodoList1() {
        JFrame frame = new JFrame("TodoList1");
        try {
            todos.load("saving_file");
        } catch (IOException e) {
            e.printStackTrace();
        }
        $$$setupUI$$$();
        frame.setContentPane(TodoList);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        button1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String name1 = JOptionPane.showInputDialog(null, "what would you like to add ?", "Item Name", JOptionPane.QUESTION_MESSAGE);
                if (name1 == null || name1.equals("")) return;
                String dueDate = JOptionPane.showInputDialog(null, "When is this due?", "Due Date", JOptionPane.QUESTION_MESSAGE);
                if (dueDate == null || name1.equals("")) return;
                String hours = JOptionPane.showInputDialog(null, "How many hours will this take?", "Hours Need", JOptionPane.QUESTION_MESSAGE);
                if (hours == null || name1.equals("")) return;
                String Urgent = JOptionPane.showInputDialog(null, "Is this urgent?", "Urgent?", JOptionPane.QUESTION_MESSAGE);
                if (Urgent == null || name1.equals("")) return;
                JOptionPane.showConfirmDialog(null, "Sure to add?", "Confirmation", JOptionPane.YES_NO_CANCEL_OPTION);
                playsound("8855.wav");
                try {
                    todos.add(name1, false, new SimpleDateFormat("yyyy/MM/dd").parse(dueDate), Integer.parseInt(hours), Boolean.parseBoolean(Urgent));
                    try {
                        todos.save("saving_file");
                    } catch (IOException e1) {

                        e1.printStackTrace();
                    }
                } catch (ParseException e1) {
                    String retry = JOptionPane.showInputDialog("Invalid Date,please Retry");
                    System.out.println(retry);

                }

            }
        });
        button2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String name2 = JOptionPane.showInputDialog(null, "what would you like to remove ?", "Item Name", JOptionPane.QUESTION_MESSAGE);
                if (name2 == null || name2.equals("")) return;
                JOptionPane.showConfirmDialog(null, "Sure to remove?", "Confirmation", JOptionPane.YES_NO_CANCEL_OPTION);
                playsound("8855.wav");
                try {
                    todos.crossOff(name2);
                } catch (ItemnotfoundException e1) {
                    e1.printStackTrace();
                }
            }
        });
        button3.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new ShowGUI(todos);
            }
        });
    }


    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    public static void main(String[] args) {
        new TodoList1();
    }

    private void playsound(String file) {
        File soundFile = new File("res/" + file);
        try {
            AudioInputStream audioIn = AudioSystem.getAudioInputStream(soundFile);
            try {
                Clip clip = AudioSystem.getClip();
                clip.open(audioIn);
                clip.start();

            } catch (LineUnavailableException e) {
                e.printStackTrace();
            }
        } catch (UnsupportedAudioFileException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        TodoList = new JPanel();
        TodoList.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 3, new Insets(10, 10, 10, 10), 10, 10));
        TodoList.setAlignmentX(1.0f);
        TodoList.setAlignmentY(1.0f);
        TodoList.setMinimumSize(new Dimension(387, 148));
        TodoList.setPreferredSize(new Dimension(800, 800));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Fira Code", Font.BOLD, 48, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setForeground(new Color(-4484941));
        label1.setText("TodoList");
        TodoList.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        button1 = new JButton();
        Font button1Font = this.$$$getFont$$$("Letter Gothic Std", Font.BOLD, 26, button1.getFont());
        if (button1Font != null) button1.setFont(button1Font);
        button1.setForeground(new Color(-10984005));
        button1.setText("ADD");
        TodoList.add(button1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        button2 = new JButton();
        Font button2Font = this.$$$getFont$$$("Letter Gothic Std", Font.BOLD, 26, button2.getFont());
        if (button2Font != null) button2.setFont(button2Font);
        button2.setForeground(new Color(-10984005));
        button2.setText("REMOVE");
        TodoList.add(button2, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        button3 = new JButton();
        Font button3Font = this.$$$getFont$$$("Letter Gothic Std", Font.BOLD, 26, button3.getFont());
        if (button3Font != null) button3.setFont(button3Font);
        button3.setForeground(new Color(-10984005));
        button3.setText("SHOW");
        TodoList.add(button3, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return TodoList;
    }


}
